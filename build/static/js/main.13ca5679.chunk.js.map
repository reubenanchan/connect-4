{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","resetBoard","setState","winner","getPiece","x","y","filter","item","checkForWin","player","winningMoves","column","checkPiece","push","length","row","addMove","nextPlayerTurn","availableYPosition","position","concat","this","rowViews","columnViews","piece","onClick","style","width","height","backgroundColor","display","padding","cursor","borderRadius","flex","border","undefined","flexDirection","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","props","Object","assign","styles","container","renderBoard","React","Component","alignment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13ca5679.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nexport default class App extends React.Component {\n\n  state = {\n    rows: 6,\n    columns: 7,\n    moves: [],\n    playerTurn: 'red',\n  };\n\n  //reset board\n  resetBoard = () => {\n    this.setState({moves: [], winner: null });\n  }\n\n  getPiece = (x,y) => {\n    const list = this.state.moves.filter((item) => {\n      return (item.x === x && item.y === y)\n    })\n    return list[0];\n  }\n\n  // Check if a winner is found\n  checkForWin = (x,y,player) => {\n    let winningMoves = [{x,y}];\n    // check for horizontal win on the right side\n    for (let column =  x + 1; column < x + 4; column += 1) {\n      const checkPiece = this.getPiece(column,y);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: column, y: y});\n        \n      } else {\n        break;\n      }\n    }\n    // check for horizontal win on the left side\n    for (let column =  x - 1; column > x - 4; column -= 1) {\n      const checkPiece = this.getPiece(column,y);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: column,y: y});\n        \n      } else {\n        break;\n      }\n    }\n    // checks for wins horizontally\n    if (winningMoves.length > 3) {\n      this.setState({ winner: player, winningMoves });\n      return true;\n    }\n    // check for wins vertically up\n    for (let row =  y + 1; row < y + 4; row += 1) {\n      const checkPiece = this.getPiece(x, row);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: x, y: row});\n      } else {\n        break;\n      }\n    }\n    // check for wins vertically down\n    for (let row =  y - 1; row > y - 4; row -= 1) {\n      const checkPiece = this.getPiece(x, row);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: x, y: row});\n        \n      } else {\n        break;\n      }\n    }\n    // checks for win vertically\n    if (winningMoves.length > 3) {\n      this.setState({ winner: player, winningMoves });\n      return true;\n    }\n  }\n\n  //add pieces to the board\n  addMove = (x,y) => {\n    const {playerTurn} = this.state;\n    const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red'; //allow to switch players after each turn\n    //checks there is an available space. The piece goes to the lowest available spot on the column\n    let availableYPosition = null;\n    for (let position = this.state.rows - 1; position >= 0; position--) {\n      if (!this.getPiece(x, position)){\n        availableYPosition = position;\n        break;\n      }\n    }\n    if (availableYPosition !== null){\n      // check for a win, based on this next move\n      this.setState({ moves: this.state.moves.concat({ x, y: availableYPosition, player: playerTurn }), playerTurn: nextPlayerTurn }, () => this.checkForWin(x, availableYPosition, playerTurn));\n    }\n  }\n\n  //create the board\n  renderBoard() {\n    const { rows, columns, winner } = this.state;\n    const rowViews = [];\n\n    for (let row = 0; row < this.state.rows; row += 1) {\n      const columnViews = [];\n      for (let column = 0; column < this.state.columns; column += 1) {\n        const piece = this.getPiece(column, row);\n        columnViews.push(\n          <div onClick = {() => {this.addMove(column, row)}} style = { {width: '8vw', height: '8vw', backgroundColor: '#00a8ff', display: 'flex', padding: 5, cursor: 'pointer'} }>\n            <div style={{ borderRadius: '50%', backgroundColor: 'white', flex: 1, display: 'flex'}}>\n              {piece ? <div style ={{ backgroundColor: piece.player, flex: 1, borderRadius: '50%', border: '1x solid #333'}} /> : undefined}\n            </div>\n          </div>\n        );\n      }\n      rowViews.push(\n        <div style={{ display: 'flex', flexDirection: 'row'}}>{columnViews}</div>\n      )\n    }\n    return (\n      // checks and displays winner then resets board on click.\n      <div style={{ backgroundColor: 'red', display: 'flex', flexDirection: 'column'}}>\n        {winner && <div onClick={this.resetBoard} style = {{ position: 'absolute', left: 0, right: 0, bottom: 0, top: 0, zIndex: 3, backgroundColor: 'rgba( 0, 0, 0, .5)', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#fff', fontWeight: 200, fontSize: \"8vw\"}}>{`${winner} WINS!!!`}</div>} \n        {rowViews}\n      </div>\n    );\n  }\n\n  render() {\n    const { style } = this.props;\n\n    return (\n      <div style = {style ? Object.assign({}, styles.container, style) : styles.container}>\n        <div>\n          {this.renderBoard()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignment: 'center'\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}